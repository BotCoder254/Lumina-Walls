import React, { useState, useEffect } from 'react';



import { motion } from 'framer-motion';



import Masonry from 'react-masonry-css';



import { LoadingSpinner } from './LoadingSpinner';



import { FiDownload, FiHeart, FiShare2, FiMaximize2, FiFolder } from 'react-icons/fi';



import { UNSPLASH_CONFIG } from '../config/unsplash';



import { useAuth } from '../contexts/AuthContext';



import { Wallpaper } from '../types';



import { doc, updateDoc, arrayUnion, arrayRemove, onSnapshot } from 'firebase/firestore';



import { db } from '../App';



import Toast from './Toast';



import { ToastState, ToastType } from '../types/toast';







interface WallpaperGridProps {



  searchQuery?: string;



  category?: string;



  initialWallpapers?: Wallpaper[];



  disableInfiniteScroll?: boolean;



}







export const WallpaperGrid: React.FC<WallpaperGridProps> = ({



  searchQuery = '',



  category = 'all',



  initialWallpapers,



  disableInfiniteScroll = false



}) => {



  const [wallpapers, setWallpapers] = useState<Wallpaper[]>(initialWallpapers || []);



  const [loading, setLoading] = useState(true);



  const [loadingProgress, setLoadingProgress] = useState(0);



  const [page, setPage] = useState(1);



  const [hasMore, setHasMore] = useState(true);



  const [selectedWallpaper, setSelectedWallpaper] = useState<Wallpaper | null>(null);



  const { currentUser } = useAuth();



  const [favorites, setFavorites] = useState<string[]>([]);



  const [toast, setToast] = useState<ToastState>({



    message: '',



    type: 'info',



    isVisible: false



  });







  // Masonry breakpoints



  const breakpointColumns = {



    default: 5,



    1536: 4,



    1280: 3,



    1024: 3,



    768: 2,



    640: 2,



  };







  // Fetch user's favorites



  useEffect(() => {



    if (!currentUser) return;







    const userRef = doc(db, 'users', currentUser.uid);



    const unsubscribe = onSnapshot(userRef, (doc) => {



      if (doc.exists()) {



        setFavorites(doc.data().favorites || []);



      }



    });







    return () => unsubscribe();



  }, [currentUser]);







  const showToast = (message: string, type: ToastType) => {



    setToast({ message, type, isVisible: true });



    setTimeout(() => {



      setToast(prev => ({ ...prev, isVisible: false }));



    }, 3000);



  };







  const handleLike = async (wallpaperId: string) => {



    if (!currentUser) {



      showToast('Please login to add to favorites', 'info');



      return;



    }



    



    const userRef = doc(db, 'users', currentUser.uid);



    try {



      if (favorites.includes(wallpaperId)) {



        await updateDoc(userRef, {



          favorites: arrayRemove(wallpaperId)



        });



        showToast('Removed from favorites', 'info');



      } else {



        await updateDoc(userRef, {



          favorites: arrayUnion(wallpaperId)



        });



        showToast('Added to favorites', 'success');



      }



    } catch (error) {



      showToast('Failed to update favorites', 'error');



    }



  };







  const handleShare = async (wallpaper: Wallpaper) => {



    if (navigator.share) {



      try {



        await navigator.share({



          title: 'Check out this wallpaper!',



          text: `Wallpaper by ${wallpaper.user.name} on Lumina Walls`,



          url: wallpaper.urls.full



        });



        showToast('Wallpaper shared successfully!', 'success');



      } catch (error) {



        if ((error as Error).name !== 'AbortError') {



          showToast('Failed to share wallpaper', 'error');



        }



      }



    } else {



      try {



        await navigator.clipboard.writeText(wallpaper.urls.full);



        showToast('Link copied to clipboard!', 'success');



      } catch (error) {



        showToast('Failed to copy link', 'error');



      }



    }



  };







  const handleDownload = async (wallpaper: Wallpaper) => {



    try {



      showToast('Starting download...', 'info');



      const response = await fetch(wallpaper.urls.full);



      const blob = await response.blob();



      const url = window.URL.createObjectURL(blob);



      const a = document.createElement('a');



      a.href = url;



      a.download = `wallpaper-${wallpaper.id}.jpg`;



      document.body.appendChild(a);



      a.click();



      document.body.removeChild(a);



      window.URL.revokeObjectURL(url);



      showToast('Download completed!', 'success');



    } catch (error) {



      showToast('Failed to download wallpaper', 'error');



    }



  };







  // Add this function after the handleDownload function



  const fetchWallpapers = async () => {



    try {



      setLoading(true);



      const progressInterval = setInterval(() => {



        setLoadingProgress(prev => Math.min(prev + 10, 90));



      }, 200);



      let endpoint = `${UNSPLASH_CONFIG.baseUrl}/photos`;



      let params = new URLSearchParams({



        page: page.toString(),



        per_page: '30',



        order_by: 'latest'



      });



      // Handle search and category filtering



      if (searchQuery) {



        endpoint = `${UNSPLASH_CONFIG.baseUrl}/search/photos`;



        params.append('query', searchQuery);



      }



      if (category !== 'all') {



        params.append('collections', category);



      }



      const response = await fetch(



        `${endpoint}?${params.toString()}`,



        {



          headers: {



            'Authorization': `Client-ID ${UNSPLASH_CONFIG.accessKey}`



          }



        }



      );



      const data = await response.json();



      clearInterval(progressInterval);



      setLoadingProgress(100);



      const photos = searchQuery ? data.results : data;



      const newWallpapers = photos.map((photo: any) => ({



        id: photo.id,



        urls: {



          regular: photo.urls.regular,



          full: photo.urls.full,



          raw: photo.urls.raw



        },



        user: {



          name: photo.user.name,



          username: photo.user.username,



          profile_image: photo.user.profile_image.medium



        },



        likes: photo.likes,



        description: photo.description || photo.alt_description || 'Untitled'



      }));



      if (page === 1) {



        setWallpapers(newWallpapers);



      } else {



        setWallpapers(prev => [...prev, ...newWallpapers]);



      }



      setHasMore(newWallpapers.length === 30);



    } catch (error) {



      console.error('Error fetching wallpapers:', error);



    } finally {



      setLoading(false);



    }



  };







  // Add this useEffect to trigger the fetch



  useEffect(() => {



    if (!initialWallpapers) {



      fetchWallpapers();



    }



  }, [page, searchQuery, category]);







  // Add this useEffect to handle initialWallpapers



  useEffect(() => {



    if (initialWallpapers) {



      setWallpapers(initialWallpapers);



      setLoading(false);



    }



  }, [initialWallpapers]);







  return (



    <div className="px-2 sm:px-4">







      <Masonry







        breakpointCols={breakpointColumns}







        className="flex gap-4"







        columnClassName="masonry-grid-column"







      >







        {wallpapers.map((wallpaper, index) => (







          <motion.div







            key={wallpaper.id}







            initial={{ opacity: 0, y: 20 }}







            animate={{ opacity: 1, y: 0 }}







            transition={{ delay: index * 0.1 }}







            className="mb-4"







          >







            <div className="relative group rounded-xl overflow-hidden bg-white shadow-custom hover:shadow-custom-lg transition-shadow">







              <img







                src={wallpaper.urls.regular}







                alt={wallpaper.description}







                className="w-full object-cover cursor-zoom-in"







                loading="lazy"







                onClick={() => setSelectedWallpaper(wallpaper)}







              />







              







              {/* Hover Overlay */}







              <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-200">







                {/* Top Actions */}







                <div className="absolute top-4 right-4 flex gap-2">







                  <motion.button







                    whileHover={{ scale: 1.1 }}







                    whileTap={{ scale: 0.9 }}







                    className="p-2 bg-white rounded-full text-gray-700 hover:bg-primary hover:text-white transition-colors shadow-lg"







                    onClick={() => handleLike(wallpaper.id)}







                  >







                    <FiHeart className={`text-xl ${favorites.includes(wallpaper.id) ? 'fill-current text-primary' : ''}`} />







                  </motion.button>







                  <motion.button







                    whileHover={{ scale: 1.1 }}







                    whileTap={{ scale: 0.9 }}







                    className="p-2 bg-white rounded-full text-gray-700 hover:bg-primary hover:text-white transition-colors shadow-lg"







                    onClick={() => handleShare(wallpaper)}







                  >







                    <FiShare2 className="text-xl" />







                  </motion.button>







                </div>







                







                {/* Bottom Info */}







                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent">







                  <div className="flex items-center justify-between">







                    <div className="flex items-center gap-2">







                      <img







                        src={wallpaper.user.profile_image}







                        alt={wallpaper.user.name}







                        className="w-8 h-8 rounded-full border-2 border-white shadow-md"







                      />







                      <span className="text-white text-sm font-medium drop-shadow-md">







                        {wallpaper.user.name}







                      </span>







                    </div>







                    <motion.button







                      whileHover={{ scale: 1.1 }}







                      whileTap={{ scale: 0.9 }}







                      className="p-2 bg-primary rounded-full text-white shadow-lg hover:bg-primary-dark"







                      onClick={() => handleDownload(wallpaper)}







                    >







                      <FiDownload className="text-xl" />







                    </motion.button>







                  </div>







                </div>







              </div>







            </div>







          </motion.div>







        ))}







      </Masonry>







      







      {/* Load More Button */}







      {hasMore && !loading && (







        <div className="mt-8 text-center">







          <motion.button







            whileHover={{ scale: 1.05 }}







            whileTap={{ scale: 0.95 }}







            onClick={() => setPage(p => p + 1)}







            className="px-6 py-2 bg-primary hover:bg-primary-dark text-white rounded-full transition-colors shadow-lg"







          >







            Load More







          </motion.button>







        </div>







      )}







      







      {/* Loading Spinner */}







      {loading && (







        <div className="mt-8">







          <LoadingSpinner progress={loadingProgress} />







        </div>







      )}







      







      {/* Toast Notifications */}







      <Toast







        message={toast.message}







        type={toast.type}







        isVisible={toast.isVisible}







        onClose={() => setToast(prev => ({ ...prev, isVisible: false }))}







      />







    </div>




  );



};







export default WallpaperGrid;






